const BASE_URL_POSTS = "http://localhost:8080/api/posts";

/**
 * üìò Obtener una rese√±a por su ID
 * M√©todo: GET /api/posts/{postId}
 * Devuelve los datos de la rese√±a si existe, o lanza un error si no se encuentra.
 */
export async function getPostById(postId) {
  try {
    const response = await fetch(`${API_BASE_URL}posts/${postId}`);
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Post not found");
    }
    return await response.json();
  } catch (err) {
    console.error("‚ùå getPostById:", err.message);
    throw err;
  }
}

/**
 * üìã Listar rese√±as de un negocio
 * M√©todo: GET /api/businesses/{businessId}/posts?page=&size=
 * Retorna una p√°gina de rese√±as asociadas a un negocio espec√≠fico.
 */
export async function listBusinessPosts(businessId, page = 0, size = 10) {
  try {
    const response = await fetch(
      `${API_BASE_URL}businesses/${businessId}/posts?page=${page}&size=${size}`
    );
    if (!response.ok) throw new Error("Error fetching business posts");
    return await response.json();
  } catch (err) {
    console.error("‚ùå listBusinessPosts:", err.message);
    throw err;
  }
}

/**
 * üë§ Listar rese√±as creadas por un usuario
 * M√©todo: GET /api/users/{authorUserId}/posts?page=&size=
 * Permite obtener las rese√±as escritas por un usuario determinado.
 */
export async function listUserPosts(authorUserId, page = 0, size = 10) {
  try {
    const response = await fetch(
      `${API_BASE_URL}users/${authorUserId}/posts?page=${page}&size=${size}`
    );
    if (!response.ok) throw new Error("Error fetching user posts");
    return await response.json();
  } catch (err) {
    console.error("‚ùå listUserPosts:", err.message);
    throw err;
  }
}

/**
 * üåç Feed global de rese√±as
 * M√©todo: GET /api/feed/posts?page=&size=
 * Devuelve las rese√±as m√°s recientes publicadas por todos los usuarios.
 */
export async function getFeedPosts(page = 0, size = 10) {
  try {
    const response = await fetch(
      `${API_BASE_URL}feed/posts?page=${page}&size=${size}`
    );
    if (!response.ok) throw new Error("Error fetching feed posts");
    return await response.json();
  } catch (err) {
    console.error("‚ùå getFeedPosts:", err.message);
    throw err;
  }
}

/**
 * ‚≠ê Obtener el rating agregado de un negocio
 * M√©todo: GET /api/businesses/{businessId}/rating
 * Devuelve promedio, n√∫mero total de rese√±as y distribuci√≥n por estrellas.
 */
export async function getBusinessRating(businessId) {
  try {
    const response = await fetch(`${API_BASE_URL}businesses/${businessId}/rating`);
    if (!response.ok) throw new Error("Error fetching business rating");
    return await response.json();
  } catch (err) {
    console.error("‚ùå getBusinessRating:", err.message);
    throw err;
  }
}

/**
 * ‚úçÔ∏è Crear una nueva rese√±a
 * M√©todo: POST /api/posts
 * Env√≠a un objeto CreatePostRequest (rating, contenido, businessId, etc.)
 * y devuelve la rese√±a creada.
 */
export async function createPost(postData) {
  try {
    const response = await fetch(`${API_BASE_URL}posts`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(postData),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Error creating post");
    }

    return await response.json();
  } catch (err) {
    console.error("‚ùå createPost:", err.message);
    throw err;
  }
}

